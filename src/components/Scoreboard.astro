---
import { SCORE_SEGMENTS } from "../config";
---

<style define:vars={{ categories: SCORE_SEGMENTS.length }} is:global>
  seven-wonders-scoreboard {
    --cols: 2;
    --rows: calc(var(--categories) + 2);
    --players: 1;

    & table {
      background-color: rgba(255, 255, 255, 0.5);
    }

    & th.player {
      min-width: 2.5rem;
      height: 2rem;
      width: calc(calc(100% - 3rem) / var(--players));
      text-align: center;
    }

    & tfoot td {
      height: 2rem;
      text-align: center;
    }

    & input {
      min-width: unset;
      width: 100%;
      padding: 0.5rem 0.25rem;
      border: none;
      outline: none;
      text-align: center;
      height: 2.5rem;
      background-color: white;
    }

    & #sum {
      display: none;
    }

    &[step="var(--categories)"] {
      & #sum {
        display: flex;
      }
    }
  }
</style>
<seven-wonders-scoreboard class="stretch">
  <table class="stretch">
    <thead>
      <tr>
        <th></th>
      </tr>
    </thead>
    <tbody>
      {
        SCORE_SEGMENTS.map((s) => (
          <tr class="category" data-segment={s.key}>
            <td>
              <img src={s.imgPath} alt={s.name} width="40" height="40" />
            </td>
          </tr>
        ))
      }
    </tbody>
    <tfoot>
      <tr>
        <td></td>
      </tr>
    </tfoot>
  </table>
  <button role="button" class="btn-full" id="sum">Moment of Truth</button>
</seven-wonders-scoreboard>
<script>
  import { SCORE_SEGMENTS } from "../config";
  import type { VPComponents } from "../types";

  class Scoreboard extends HTMLElement {
    static observedAttributes = ["players", "step"];

    constructor() {
      super();
    }

    connectedCallback() {
      this.setAttribute("players", "");
      const sumBtn = this.querySelector("#sum") as HTMLButtonElement;
      sumBtn.addEventListener("click", this.handleSumClick.bind(this));
    }

    handleSumClick(e: Event) {
      const table = this.querySelector("table") as HTMLTableElement;
      const players = this.getPlayers();
      players.forEach((p, i) => {
        const inputs = Array.from(
          table.querySelectorAll(`input[player=${p}`),
        ) as HTMLInputElement[];
        const playerResult = inputs.reduce((sum, a) => {
          return sum + parseInt(a.value);
        }, 0);
        const tfoot = table.querySelector("tfoot tr") as HTMLElement;
        const tf = document.createElement("td");
        tf.textContent = `${playerResult}`;
        tfoot.appendChild(tf);
      });
    }

    attributeChangedCallback(name: string, oldValue: string, newValue: string) {
      console.log(`${name} changed from ${oldValue} to ${newValue}`);
      if (name === "players") {
        const players = newValue.split(",").filter((n) => n);
        if (players.length === 0) {
          return;
        }
        if (players.length > 1) {
          this.style.setProperty("--cols", String(players.length + 1));
        }
        const player = players[players.length - 1] as string;
        this.createPlayer({
          playerName: player,
          numPlayers: players.length,
        });
        return;
      }
      if (name === "step") {
        const step = parseInt(newValue);
        if (isNaN(step)) {
          return;
        }
        const segment = SCORE_SEGMENTS[step];
        this.addStep(segment.key);
      }
    }

    createPlayer({
      playerName,
      numPlayers,
    }: {
      playerName: string;
      numPlayers: number;
    }) {
      const header = this.querySelector("thead > tr") as HTMLElement;
      const player = document.createElement("th") as HTMLElement;
      player.textContent = playerName;
      player.classList.add("player");
      header.appendChild(player);
      this.style.setProperty("--players", String(numPlayers));
    }

    addStep(key: keyof VPComponents) {
      const tr = this.querySelector(
        `tbody tr[data-segment=${key}]`,
      ) as HTMLElement;
      const players = this.getPlayers();
      for (let i = 0; i < players.length; i++) {
        const td = document.createElement("td");
        const input = this.createInput(players[i]);
        td.appendChild(input);
        tr.appendChild(td);
      }
      const firstInput = tr.querySelector(
        "input:first-child",
      ) as HTMLInputElement;
      firstInput.select();
    }

    createInput(player: string) {
      const label = document.createElement("label");
      const input = document.createElement("input");
      input.setAttribute("type", "number");
      input.setAttribute("step", "1");
      input.setAttribute("min", "0");
      input.setAttribute("value", "0");
      input.setAttribute("player", player);
      label.appendChild(input);
      return label;
    }

    getPlayers() {
      const playersRaw = this.getAttribute("players");
      if (!playersRaw) {
        return [];
      }
      return playersRaw.split(",").filter((p) => p);
    }
  }
  customElements.define("seven-wonders-scoreboard", Scoreboard);
</script>
