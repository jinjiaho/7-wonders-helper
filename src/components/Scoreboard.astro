---
import { SCORE_SEGMENTS } from "../config";
---

<style define:vars={{ categories: SCORE_SEGMENTS.length }} is:global>
  seven-wonders-scoreboard {
    --cols: 2;
    --rows: calc(var(--categories) + 2);
    --players: 1;

    & table {
      background-color: rgba(255, 255, 255, 0.5);
    }

    & th.player {
      min-width: 2.5rem;
      width: calc(calc(100% - 3rem) / var(--players));
      text-align: center;
    }

    & input {
      min-width: unset;
      max-width: 2rem;
      padding: 0.5rem 0.25rem;
      border: none;
      width: 100%;
    }
  }
</style>
<seven-wonders-scoreboard class="stretch">
  <table class="stretch">
    <thead>
      <tr>
        <th></th>
      </tr>
    </thead>
    <tbody>
      {
        SCORE_SEGMENTS.map((s) => (
          <tr class="category">
            <td>
              <img src={s.imgPath} alt={s.name} width="40" height="40" />
            </td>
          </tr>
        ))
      }
    </tbody>
    <tfoot>
      <tr>
        <td></td>
      </tr>
    </tfoot>
  </table>
</seven-wonders-scoreboard>
<script>
  import { SCORE_SEGMENTS } from "../config";

  class Scoreboard extends HTMLElement {
    static observedAttributes = ["players", "step"];

    constructor() {
      super();
    }

    connectedCallback() {
      this.setAttribute("players", "");
      this.setAttribute("step", "init");
    }

    attributeChangedCallback(name: string, oldValue: string, newValue: string) {
      if (name === "players") {
        const players = newValue.split(",").filter((n) => n);
        if (players.length === 0) {
          return;
        }
        if (players.length > 1) {
          this.style.setProperty("--cols", String(players.length + 1));
        }
        const player = players[players.length - 1] as string;
        createPlayer({
          playerName: player,
          container: this,
          numPlayers: players.length,
        });
        return;
      }
      if (name === "step") {
        const step = parseInt(newValue);
        const segment = SCORE_SEGMENTS[step];
      }

      function createPlayer({
        playerName,
        container,
        numPlayers,
      }: {
        playerName: string;
        container: HTMLElement;
        numPlayers: number;
      }) {
        const header = container.querySelector("thead > tr") as HTMLElement;
        const player = document.createElement("th") as HTMLElement;
        player.textContent = playerName;
        player.classList.add("player");
        header.appendChild(player);
        container.style.setProperty("--players", String(numPlayers));
      }

      function createInput(key: string) {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.setAttribute("type", "number");
        input.setAttribute("step", "1");
        input.setAttribute("min", "0");
        input.setAttribute("value", "0");
        input.setAttribute("name", key);
        label.appendChild(input);

        input.addEventListener("change", function (e) {});
        return label;
      }
    }
  }
  customElements.define("seven-wonders-scoreboard", Scoreboard);
</script>
