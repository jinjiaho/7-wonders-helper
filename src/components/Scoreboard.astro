---
import { SCORE_SEGMENTS } from "../config";
---

<style define:vars={{ categories: SCORE_SEGMENTS.length }}>
  seven-wonders-scoreboard {
    --cols: 2;
    --rows: calc(var(--categories) + 2);
    align-self: stretch;
    display: grid;
    grid-template-columns: 3rem repeat(calc(var(--cols) - 1), 1fr);
    grid-gap: 1px;
    grid-template-rows: repeat(var(--rows), 3rem);
    background-color: rgba(255, 255, 255, 0.5);

    .categories {
      display: grid;
      grid-template-rows: subgrid;
      grid-row: 2 / span var(--categories);
      grid-column: 1;
      border-right: 1px solid sandybrown;
    }

    .tally {
      display: grid;
      grid-template-columns: subgrid;
      grid-column: 2 / span var(--cols);
      grid-row: var(--rows);
    }

    & > form {
      display: grid;
      grid-template-columns: subgrid;
      grid-column-start: 2;
      grid-column-end: calc(var(--cols) + 1);
      grid-row-start: 1;
      grid-row-end: var(--rows);

      & fieldset {
        display: grid;
        grid-template-rows: subgrid;
        border: none;
        margin: 0;
        padding: 0;

        & input {
          min-width: unset;
          max-width: 2rem;
          padding: 0.5rem 0.25rem;
          border: none;
          width: 100%;
        }
      }
    }
  }
</style>
<seven-wonders-scoreboard>
  <div class="categories">
    {
      SCORE_SEGMENTS.map((s) => (
        <div class="category">
          <img src={s.imgPath} alt={s.name} width="40" height="40" />
        </div>
      ))
    }
  </div>
  <form></form>
  <div class="tally"></div>
</seven-wonders-scoreboard>
<script>
  import { SCORE_SEGMENTS } from "../config";

  class Scoreboard extends HTMLElement {
    static observedAttributes = ["players", "step"];

    constructor() {
      super();
    }

    connectedCallback() {
      this.setAttribute("players", "");
      this.setAttribute("step", "init");
    }

    attributeChangedCallback(name: string, oldValue: string, newValue: string) {
      // console.log(
      //   `Attribute ${name} changed from ${typeof oldValue} ${oldValue} to ${typeof newValue} ${newValue}.`,
      // );
      // console.log("attributChangeCallback this", this);
      if (name === "players") {
        const players = newValue.split(",").filter((n) => n);
        if (players.length === 0) {
          return;
        }
        this.classList.remove("hide");
        if (players.length > 1) {
          this.style.setProperty("--cols", String(players.length + 1));
        }
        const form = this.querySelector("form") as HTMLFormElement;
        const player = players.pop() as string;
        createPlayer(player, form);
        return;
      }
      // if (name === "step") {
      //   const step = parseInt(newValue);
      //   const segment = SCORE_SEGMENTS[step];

      //   this.dispatchEvent(
      //     new CustomEvent("next-step", {
      //       detail: {
      //         title: segment.name,
      //         description: segment.description,
      //       },
      //       bubbles: true,
      //       composed: true,
      //     }),
      //   );
      // }

      function createPlayer(playerName: string, form: HTMLFormElement) {
        const fieldset = document.createElement("fieldset");
        const legend = document.createElement("legend");
        legend.textContent = playerName;
        fieldset.appendChild(legend);
        SCORE_SEGMENTS.forEach((s) => {
          fieldset.appendChild(createInput(s.key));
        });
        form.appendChild(fieldset);
      }

      function createInput(key: string) {
        const label = document.createElement("label");
        const input = document.createElement("input");
        input.setAttribute("type", "number");
        input.setAttribute("step", "1");
        input.setAttribute("min", "0");
        input.setAttribute("value", "0");
        input.setAttribute("name", key);
        label.appendChild(input);
        return label;
      }
    }
  }
  customElements.define("seven-wonders-scoreboard", Scoreboard);
</script>
