---
import { PLAYER_CHAR_LIMITS } from "../config";
import AddPlayerForm from "./AddPlayerForm.astro";
import Scoreboard from "./Scoreboard.astro";
---

<style is:global>
  #tally-component {
    text-align: center;
    width: 100%;
    max-width: 40rem;

    & header {
      gap: 0.5rem;

      & * {
        margin: 0;
      }
    }

    & #sum {
      display: none;
    }

    &:not([step="start"]) {
      & #start,
      & add-player-form {
        display: none;
      }
    }

    &[step="start"] {
      & #next,
      & #prev {
        display: none;
      }
    }

    &[step="end"] {
      & #start,
      & add-player-form {
        display: none;
      }
      & #sum {
        display: flex;
      }
    }
  }

  #tally-action {
    gap: 0.5rem;
  }

  #error {
    flex-basis: 100%;
    flex-shrink: 0;
    color: red;
    text-align: left;
    font-size: 0.9rem;
  }

  #controls {
    flex-direction: row;
    flex-wrap: wrap;
    column-gap: 0.5rem;

    & > button {
      padding: 1rem;
      border-radius: 0.5rem;
      border: 1px solid #ccc;
    }
  }

  #start,
  #sum {
    flex-basis: 100%;
    flex-shrink: 0;
  }

  #prev,
  #next {
    flex-basis: 45%;
    flex-grow: 1;
  }
</style>
<seven-wonders-tally id="tally-component">
  <header id="step-header">
    <h2 id="step-title">Step 1: Add Players</h2>
    <p id="step-instructions">
      Up to {PLAYER_CHAR_LIMITS.max} chars, letters only, no spaces
    </p>
  </header>
  <section id="tally-action">
    <AddPlayerForm classes="start" />
    <div id="error" class="hide"></div>
  </section>

  <Scoreboard />
  <div id="controls" class="stretch">
    <button role="button" id="start" disabled>Start</button>
    <button role="button" id="sum">Moment of Truth</button>
    <button role="button" id="prev">Prev</button>
    <button role="button" id="next">Next</button>
  </div>
</seven-wonders-tally>
<script>
  import { PLAYER_LIMIT, SCORE_SEGMENTS } from "../config";
  import type { AddPlayerEvent, NextStepEvent } from "../types";

  class SevenWondersTally extends HTMLElement {
    step = "start";
    static observedAttributes = ["step"];
    constructor() {
      super();
    }

    connectedCallback() {
      this.setAttribute("step", "start");
      const startBtn = this.querySelector("#start") as HTMLButtonElement;
      const nextBtn = this.querySelector("#next") as HTMLButtonElement;
      const prevBtn = this.querySelector("#prev") as HTMLButtonElement;
      const sumBtn = this.querySelector("#sum") as HTMLButtonElement;
      const error = this.querySelector("#error") as HTMLElement;
      const addPlayerForm = this.querySelector(
        "add-player-form",
      ) as HTMLElement;

      // @ts-ignore
      addPlayerForm.addEventListener(
        "add-player",
        function (e: AddPlayerEvent) {
          e.preventDefault();
          removeError();

          const numPlayers = addPlayer(e.detail.playerName);
          if (numPlayers > 2) {
            startBtn.removeAttribute("disabled");
          }
          if (numPlayers === PLAYER_LIMIT) {
            addPlayerForm.classList.add("hide");
          }
        },
      );

      window.addEventListener("error", this.handleError.bind(this));

      startBtn.addEventListener("click", this.handleStartClick.bind(this));

      nextBtn.addEventListener("click", this.handleNextClick.bind(this));

      prevBtn.addEventListener("click", this.handlePrevClick.bind(this));

      sumBtn.addEventListener("click", this.handleSumClick.bind(this));

      function addPlayer(name: string) {
        const scoreboard = document.querySelector(
          "seven-wonders-scoreboard",
        ) as HTMLElement;
        const players = (scoreboard.getAttribute("players") || "")
          .split(",")
          .filter((n) => n);

        if (players.includes(name)) {
          throw new Error(
            "Name already in use! Please choose a different name.",
          );
        }
        players.push(name);
        scoreboard.setAttribute("players", players.join(","));
        return players.length;
      }

      function removeError() {
        error.textContent = "";
        error.classList.add("hide");
      }
    }

    handleError(e: ErrorEvent) {
      e.preventDefault();
      const error = this.querySelector("#error") as HTMLElement;
      error.textContent = e.error.message;
      error.classList.remove("hide");
    }

    handleStartClick(e: Event) {
      e.preventDefault;
      this.setStep("0");
    }

    handleNextClick(e: Event) {
      e.preventDefault();
      const step = parseInt(this.getAttribute("step")!);
      if (isNaN(step)) {
        this.setStep("start");
        return;
      }
      if (step === SCORE_SEGMENTS.length - 1) {
        this.setStep("end");
        (e.target as HTMLButtonElement).setAttribute("disabled", "true");
        return;
      }
      const nextStep = String(step + 1);
      this.setStep(nextStep);
    }

    handlePrevClick(e: Event) {
      e.preventDefault();
      const thisStep = this.getAttribute("step")!;
      if (thisStep === "end") {
        const lastStep = String(SCORE_SEGMENTS.length - 1);
        this.setStep(lastStep);
        (this.querySelector("#next") as HTMLButtonElement).removeAttribute(
          "disabled",
        );
        return;
      }
      const step = parseInt(this.getAttribute("step")!);
      if (step === 0 || isNaN(step)) {
        this.setStep("start");
        return;
      }
      const prevStep = String(step - 1);
      this.setStep(prevStep);
    }

    handleSumClick() {
      console.log("TODO: MOMENT OF TRUTH");
    }

    setStep(step: string) {
      this.setAttribute("step", step);
      const scoreboard = this.querySelector(
        "seven-wonders-scoreboard",
      ) as HTMLElement;
      scoreboard.setAttribute("step", step);
    }

    attributeChangedCallback(name: string, oldValue: string, newValue: string) {
      if (name === "step") {
        const titleEl = this.querySelector("h2") as HTMLElement;
        const instructionEl = this.querySelector(
          "#step-instructions",
        ) as HTMLElement;
        const index = parseInt(newValue);
        if (isNaN(index)) return;

        const segment = SCORE_SEGMENTS[index];
        titleEl.textContent = segment.name;
        instructionEl.textContent = segment.description;
      }
    }
  }
  customElements.define("seven-wonders-tally", SevenWondersTally);
</script>
